@model IEnumerable<MyCinema.Data.MovieApi.MovieNowPlayingDTO>

@{
    var currentPage = ViewBag.CurrentPage ?? 1;
    var totalPages = ViewBag.TotalPages ?? 1;

    int maxPagesToShow = 10;
    int startPage = Math.Max(1, currentPage - maxPagesToShow / 2);
    int endPage = Math.Min(totalPages, currentPage + maxPagesToShow / 2);
}
<h1 class="text-center my-2">Now Playing Movies</h1>

<div class="container">
    <div class="table-responsive">
        <table class="table table-bordered table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th scope="col">
                            <input type="checkbox" id="select-all" onclick="toggleSelectAll(this)">
                        </th>
                    <th scope="col">#</th>
                    <th scope="col">id</th>
                    <th scope="col">Title</th>
                    <th scope="col">Release date</th>
                    <th scope="col">Original Lang</th>
                    <th scope="col">Adult?</th>
                    <th scope="col">Vote average</th>
                    <th scope="col">Vote Count</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.Any())
                {
                    int index = 1;
                    foreach (var movie in Model)
                    {
                                   <tr style="cursor:pointer" onclick="window.location.href='@Url.Action("Details", "Movie", new { id = movie.id })'">
                                    <td>
                                                                <input type="checkbox" name="selectedMovies" value="@movie.id" class="movie-checkbox"  onclick="event.stopPropagation(); updateButtonState();">
                                    </td>
                                    <th scope="row">@index</th>
                                    <td>@movie.id</td>
                                    <td>@movie.title</td>
                                    <td>@movie.release_date</td>
                                    <td>@movie.original_language</td>
                                    <td>@movie.adult</td>
                                    <td>@movie.vote_avarage</td>
                                    <td>@movie.vote_count</td>
                                </tr>
                        index++;
                    }
                }
                else
                {
                        <tr>
                            <td colspan="6" class="text-center">No movies available.</td>
                        </tr>
                }
            </tbody>
        </table>
    </div>
    <form id="movie-form" method="post" asp-action="AddMoviesToDataBase">
    <input type="hidden" id="selectedMoviesInput" name="selectedMovies" value="" />
     <div class="d-flex justify-content-between">
            <input type="submit" id="add-to-database-btn" value="AddMoviesToDataBase" class="btn btn-primary" disabled>Add to Database</input>
        </div>
        </form>
<div class="d-flex justify-content-between mt-2">
    <div class="pagination-container overflow-auto">
        <ul class="pagination">
                @for (var i = 1; i <= ViewBag.totalPages; i++)
                {
                        <li class="page-item @(ViewBag.currentPage == i ? "active" : "")">
                        <a class="page-link" href="?page=@i">@i</a>
                    </li>
                }
        </ul>
    </div>
</div>

</div>
<script>
    // Array to store selected movie IDs
    let selectedMovieIds = [];

    // Function to handle the select/deselect all checkbox
    function toggleSelectAll(source) {
        const checkboxes = document.querySelectorAll('.movie-checkbox');
        checkboxes.forEach(checkbox => {
            checkbox.checked = source.checked;
            // If "select all" is checked, add all movie IDs to the array
            if (checkbox.checked) {
                addMovieId(checkbox.value);
            } else {
                removeMovieId(checkbox.value);
            }
        });
        updateButtonState();
    }

    // Function to handle individual checkbox clicks
    function updateButtonState() {
        const checkboxes = document.querySelectorAll('.movie-checkbox');
        selectedMovieIds = Array.from(checkboxes)
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.value);

        // Update the hidden input field with selected movie IDs
        const hiddenInput = document.getElementById('selectedMoviesInput');
        hiddenInput.value = selectedMovieIds.join(','); // Store selected IDs as comma-separated string

        // Enable/Disable the button based on whether any movie is selected
        const button = document.getElementById('add-to-database-btn');
        button.disabled = selectedMovieIds.length === 0;
    }

    // Function to add a movie ID to the selectedMovieIds array
    function addMovieId(id) {
        if (!selectedMovieIds.includes(id)) {
            selectedMovieIds.push(id);
        }
    }

    // Function to remove a movie ID from the selectedMovieIds array
    function removeMovieId(id) {
        const index = selectedMovieIds.indexOf(id);
        if (index !== -1) {
            selectedMovieIds.splice(index, 1);
        }
    }

    // Event listener for checkbox change
    document.querySelectorAll('.movie-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            if (this.checked) {
                addMovieId(this.value);
            } else {
                removeMovieId(this.value);
            }
            updateButtonState();
        });
    });

    // Handle the form submission and set the hidden input value
    document.getElementById('movie-form').addEventListener('submit', function(event) {
        // Set the value of the hidden input to the selected movie IDs before submitting
        const hiddenInput = document.getElementById('selectedMoviesInput');
        hiddenInput.value = selectedMovieIds.join(','); // Join the array into a comma-separated string
    });
</script>
